generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Questions {
  Id           Int      @id(map: "PK_Questions") @default(autoincrement())
  Title        String
  Text         String
  Answers      String[]
  AnswerIndex  Int
  Themes       String[]
  ImageUri     String
  CreationDate DateTime @db.Timestamptz(6)
  Explanation  String?
  IsSerious    Boolean  @default(false)
  ThumbnailUri String?
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QuizQuestion {
  id                   String                 @id @default(cuid())
  title                String
  text                 String
  answers              String[]
  answerIndex          Int
  imageUrl             String
  explanation          String                 @default("")
  isSerious            Boolean                @default(false)
  thumbnailUrl         String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  quizResultElements QuizResultElement[]
  themes               QuizQuestionTheme[]
}

model QuizResultElement {
  id              String       @id @default(cuid())
  questionId      String
  quizResultId    String
  userAnswerIndex Int?
  question       QuizQuestion    @relation(fields: [questionId], references: [id])
  quizResult    QuizResult @relation(fields: [quizResultId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model QuizResult {
  id                   String                 @id @default(cuid())
  type                 Int
  score                Int
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  userId               String
  quizResultElements QuizResultElement[]
  user                 User                   @relation(fields: [userId], references: [id])
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  account       Account[]
  quizResults  QuizResult[]
  session       Session[]
  userAchievements UserAchievement[]
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model Theme {
  id        String               @id @default(cuid())
  name      String
  questions QuizQuestionTheme[]
}

model QuizQuestionTheme {
  id            String      @id @default(cuid())
  question      QuizQuestion @relation(fields: [questionId], references: [id])
  questionId    String
  theme         Theme        @relation(fields: [themeId], references: [id])
  themeId       String

  @@unique([questionId, themeId])
}

model Achievement {
  id          String  @id @default(cuid())
  title       String
  description String
  xp          Int
  maxProgress Int
  icon        String
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  currentProgress Int       @default(0)
  completed     Boolean     @default(false)
  completedAt   DateTime?
  
  user         User        @relation(fields: [userId], references: [id])
  achievement  Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
}
